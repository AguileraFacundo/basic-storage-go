// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: debts.sql

package db

import (
	"context"
)

const createDebt = `-- name: CreateDebt :one
INSERT INTO debts (balance, supplier_id, paid)
VALUES ($1, $2, $3)
RETURNING id, supplier_id, balance, paid, date
`

type CreateDebtParams struct {
	Balance    int64
	SupplierID int64
	Paid       bool
}

func (q *Queries) CreateDebt(ctx context.Context, arg CreateDebtParams) (Debt, error) {
	row := q.db.QueryRow(ctx, createDebt, arg.Balance, arg.SupplierID, arg.Paid)
	var i Debt
	err := row.Scan(
		&i.ID,
		&i.SupplierID,
		&i.Balance,
		&i.Paid,
		&i.Date,
	)
	return i, err
}

const deleteDebt = `-- name: DeleteDebt :exec
DELETE FROM supplier
WHERE id = $1
`

func (q *Queries) DeleteDebt(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteDebt, id)
	return err
}

const getDebt = `-- name: GetDebt :one
SELECT id, supplier_id, balance, paid, date FROM debts
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetDebt(ctx context.Context, id int64) (Debt, error) {
	row := q.db.QueryRow(ctx, getDebt, id)
	var i Debt
	err := row.Scan(
		&i.ID,
		&i.SupplierID,
		&i.Balance,
		&i.Paid,
		&i.Date,
	)
	return i, err
}

const listDebts = `-- name: ListDebts :many
SELECT id, supplier_id, balance, paid, date FROM debts
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListDebtsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListDebts(ctx context.Context, arg ListDebtsParams) ([]Debt, error) {
	rows, err := q.db.Query(ctx, listDebts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Debt
	for rows.Next() {
		var i Debt
		if err := rows.Scan(
			&i.ID,
			&i.SupplierID,
			&i.Balance,
			&i.Paid,
			&i.Date,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDebt = `-- name: UpdateDebt :one
UPDATE debts
SET balance = $2
WHERE id = $1
RETURNING id, supplier_id, balance, paid, date
`

type UpdateDebtParams struct {
	ID      int64
	Balance int64
}

func (q *Queries) UpdateDebt(ctx context.Context, arg UpdateDebtParams) (Debt, error) {
	row := q.db.QueryRow(ctx, updateDebt, arg.ID, arg.Balance)
	var i Debt
	err := row.Scan(
		&i.ID,
		&i.SupplierID,
		&i.Balance,
		&i.Paid,
		&i.Date,
	)
	return i, err
}
