// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: supplier.sql

package db

import (
	"context"
)

const createSupplier = `-- name: CreateSupplier :one
INSERT INTO supplier (name)
VALUES ($1)
RETURNING id, name, creation_date
`

func (q *Queries) CreateSupplier(ctx context.Context, name string) (Supplier, error) {
	row := q.db.QueryRow(ctx, createSupplier, name)
	var i Supplier
	err := row.Scan(&i.ID, &i.Name, &i.CreationDate)
	return i, err
}

const deleteSupplier = `-- name: DeleteSupplier :exec
DELETE FROM supplier
WHERE id = $1
`

func (q *Queries) DeleteSupplier(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteSupplier, id)
	return err
}

const getSupplier = `-- name: GetSupplier :one
SELECT id, name, creation_date FROM supplier
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetSupplier(ctx context.Context, id int64) (Supplier, error) {
	row := q.db.QueryRow(ctx, getSupplier, id)
	var i Supplier
	err := row.Scan(&i.ID, &i.Name, &i.CreationDate)
	return i, err
}

const listSupplier = `-- name: ListSupplier :many
SELECT id, name, creation_date FROM supplier
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListSupplierParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListSupplier(ctx context.Context, arg ListSupplierParams) ([]Supplier, error) {
	rows, err := q.db.Query(ctx, listSupplier, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Supplier
	for rows.Next() {
		var i Supplier
		if err := rows.Scan(&i.ID, &i.Name, &i.CreationDate); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSupplier = `-- name: UpdateSupplier :one
UPDATE supplier
SET name = $2
WHERE id = $1
RETURNING id, name, creation_date
`

type UpdateSupplierParams struct {
	ID   int64
	Name string
}

func (q *Queries) UpdateSupplier(ctx context.Context, arg UpdateSupplierParams) (Supplier, error) {
	row := q.db.QueryRow(ctx, updateSupplier, arg.ID, arg.Name)
	var i Supplier
	err := row.Scan(&i.ID, &i.Name, &i.CreationDate)
	return i, err
}
