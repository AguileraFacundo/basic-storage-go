// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: payment.sql

package db

import (
	"context"
)

const createPayment = `-- name: CreatePayment :one
INSERT INTO payments (balance, supplier_id)
VALUES ($1, $2)
RETURNING id, balance, supplier_id, date
`

type CreatePaymentParams struct {
	Balance    int64
	SupplierID int64
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (Payment, error) {
	row := q.db.QueryRow(ctx, createPayment, arg.Balance, arg.SupplierID)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.Balance,
		&i.SupplierID,
		&i.Date,
	)
	return i, err
}

const deletePayment = `-- name: DeletePayment :exec
DELETE FROM payments
WHERE id = $1
`

func (q *Queries) DeletePayment(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deletePayment, id)
	return err
}

const getPayment = `-- name: GetPayment :one
SELECT id, balance, supplier_id, date FROM payments
WHERE id = $1
FOR NO KEY UPDATE
`

func (q *Queries) GetPayment(ctx context.Context, id int64) (Payment, error) {
	row := q.db.QueryRow(ctx, getPayment, id)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.Balance,
		&i.SupplierID,
		&i.Date,
	)
	return i, err
}

const listPayments = `-- name: ListPayments :many
SELECT id, balance, supplier_id, date FROM payments
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListPaymentsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListPayments(ctx context.Context, arg ListPaymentsParams) ([]Payment, error) {
	rows, err := q.db.Query(ctx, listPayments, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Payment
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.Balance,
			&i.SupplierID,
			&i.Date,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePayment = `-- name: UpdatePayment :one
UPDATE payments
SET balance = $2
WHERE id = $1
RETURNING id, balance, supplier_id, date
`

type UpdatePaymentParams struct {
	ID      int64
	Balance int64
}

func (q *Queries) UpdatePayment(ctx context.Context, arg UpdatePaymentParams) (Payment, error) {
	row := q.db.QueryRow(ctx, updatePayment, arg.ID, arg.Balance)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.Balance,
		&i.SupplierID,
		&i.Date,
	)
	return i, err
}
